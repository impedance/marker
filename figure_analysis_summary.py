#!/usr/bin/env python3
"""
–ö—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∏—Å—É–Ω–∫–∞—Ö –≤ DOCX –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö.
–§–æ–∫—É—Å –Ω–∞ –≥–ª–∞–≤–Ω—ã—Ö –≤—ã–≤–æ–¥–∞—Ö –±–µ–∑ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞.
"""

import zipfile
import xml.etree.ElementTree as ET
from pathlib import Path
import re
import json


def analyze_figure_data():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Ä–∏—Å—É–Ω–∫–∞—Ö –≤ DOCX –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö."""
    docs_dir = Path('/home/spec/work/rosa/marker/real-docs')
    docx_files = [f for f in docs_dir.glob('*.docx') if not f.name.startswith('~$')]
    
    report = {
        'total_documents': len(docx_files),
        'documents_with_rosa_figure_styles': [],
        'figure_caption_patterns': set(),
        'figure_numbering_found': False,
        'recommendations': []
    }
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å–µ–π —Ä–∏—Å—É–Ω–∫–æ–≤
    figure_patterns = [
        r'[–†—Ä]–∏—Å—É–Ω–æ–∫\s+\d+',
        r'Figure\s+\d+',
        r'[–†—Ä]–∏—Å—É–Ω–æ–∫\s+[IVXLCDM]+',  # –†–∏–º—Å–∫–∏–µ —á–∏—Å–ª–∞
        r'[–†—Ä]–∏—Å\.\s*\d+',
        r'Fig\.\s*\d+'
    ]
    
    for docx_file in docx_files:
        doc_info = {
            'name': docx_file.name,
            'has_rosa_figure_style': False,
            'figure_captions_count': 0,
            'uses_figure_style': False
        }
        
        try:
            with zipfile.ZipFile(docx_file, 'r') as docx_zip:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∏–ª–∏
                if 'word/styles.xml' in docx_zip.namelist():
                    styles_xml = docx_zip.read('word/styles.xml').decode('utf-8')
                    if 'ROSA' in styles_xml and ('–†–∏—Å—É–Ω–æ–∫' in styles_xml or '—Ä–∏—Å—É–Ω–æ–∫' in styles_xml):
                        doc_info['has_rosa_figure_style'] = True
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º document.xml
                if 'word/document.xml' in docx_zip.namelist():
                    doc_xml = docx_zip.read('word/document.xml').decode('utf-8')
                    
                    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∏ —Ä–∏—Å—É–Ω–∫–æ–≤
                    for pattern in figure_patterns:
                        matches = re.findall(pattern, doc_xml)
                        doc_info['figure_captions_count'] += len(matches)
                        for match in matches:
                            report['figure_caption_patterns'].add(match[:20])  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å—Ç–∏–ª–µ–π —Ä–∏—Å—É–Ω–∫–æ–≤
                    if 'pStyle w:val="ROSA' in doc_xml and '—Ä–∏—Å—É–Ω–æ–∫' in doc_xml.lower():
                        doc_info['uses_figure_style'] = True
                        
        except Exception as e:
            doc_info['error'] = str(e)
        
        if doc_info['has_rosa_figure_style']:
            report['documents_with_rosa_figure_styles'].append(doc_info)
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º set –≤ list –¥–ª—è JSON
    report['figure_caption_patterns'] = list(report['figure_caption_patterns'])
    
    # –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    total_captions = sum(doc.get('figure_captions_count', 0) for doc in report['documents_with_rosa_figure_styles'])
    docs_with_styles = len(report['documents_with_rosa_figure_styles'])
    docs_using_styles = sum(1 for doc in report['documents_with_rosa_figure_styles'] if doc.get('uses_figure_style'))
    
    report['summary'] = {
        'documents_with_rosa_styles': docs_with_styles,
        'documents_actually_using_styles': docs_using_styles,
        'total_figure_captions_found': total_captions,
        'figure_numbering_detected': total_captions > 0
    }
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if docs_with_styles > 0:
        report['recommendations'].append("‚úÖ –ù–∞–π–¥–µ–Ω—ã —Å—Ç–∏–ª–∏ ROSA_–†–∏—Å—É–Ω–æ–∫_–ù–æ–º–µ—Ä –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö")
    else:
        report['recommendations'].append("‚ùå –°—Ç–∏–ª–∏ —Ä–∏—Å—É–Ω–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    if total_captions > 0:
        report['recommendations'].append(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {total_captions} –ø–æ–¥–ø–∏—Å–µ–π —Ä–∏—Å—É–Ω–∫–æ–≤")
        report['recommendations'].append("‚úÖ –í–æ–∑–º–æ–∂–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–µ–π —Ä–∏—Å—É–Ω–∫–æ–≤")
    else:
        report['recommendations'].append("‚ùå –ü–æ–¥–ø–∏—Å–∏ —Ä–∏—Å—É–Ω–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —è–≤–Ω–æ–º –≤–∏–¥–µ")
    
    if docs_using_styles == 0:
        report['recommendations'].append("‚ö†Ô∏è –°—Ç–∏–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã, –Ω–æ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è")
        report['recommendations'].append("üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏–∑—É—á–∏—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã —Ä–∞–∑–º–µ—Ç–∫–∏ —Ä–∏—Å—É–Ω–∫–æ–≤")
    
    return report


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("üîç –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö —Ä–∏—Å—É–Ω–∫–æ–≤ –≤ DOCX –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö...\n")
    
    report = analyze_figure_data()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ JSON
    with open('/home/spec/work/rosa/marker/figure_analysis_report.json', 'w', encoding='utf-8') as f:
        json.dump(report, f, ensure_ascii=False, indent=2)
    
    # –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç
    print("=== –ö–†–ê–¢–ö–ò–ô –û–¢–ß–ï–¢ –û –î–ê–ù–ù–´–• –†–ò–°–£–ù–ö–û–í ===")
    print(f"üìä –í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {report['total_documents']}")
    print(f"üé® –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å —Å—Ç–∏–ª—è–º–∏ ROSA –¥–ª—è —Ä–∏—Å—É–Ω–∫–æ–≤: {report['summary']['documents_with_rosa_styles']}")
    print(f"üìù –î–æ–∫—É–º–µ–Ω—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏—Ö —Å—Ç–∏–ª–∏ —Ä–∏—Å—É–Ω–∫–æ–≤: {report['summary']['documents_actually_using_styles']}")
    print(f"üñºÔ∏è –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥–ø–∏—Å–µ–π —Ä–∏—Å—É–Ω–∫–æ–≤: {report['summary']['total_figure_captions_found']}")
    
    print("\n=== –ù–ê–ô–î–ï–ù–ù–´–ï –î–û–ö–£–ú–ï–ù–¢–´ –° –°–¢–ò–õ–Ø–ú–ò –†–ò–°–£–ù–ö–û–í ===")
    for doc in report['documents_with_rosa_figure_styles']:
        status = "‚úÖ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è" if doc.get('uses_figure_style') else "‚ö†Ô∏è –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è"
        print(f"‚Ä¢ {doc['name']}: {doc['figure_captions_count']} –ø–æ–¥–ø–∏—Å–µ–π, —Å—Ç–∏–ª—å {status}")
    
    if report['figure_caption_patterns']:
        print("\n=== –ù–ê–ô–î–ï–ù–ù–´–ï –ü–ê–¢–¢–ï–†–ù–´ –ü–û–î–ü–ò–°–ï–ô –†–ò–°–£–ù–ö–û–í ===")
        for pattern in sorted(report['figure_caption_patterns']):
            print(f"‚Ä¢ {pattern}")
    
    print("\n=== –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò ===")
    for rec in report['recommendations']:
        print(rec)
    
    print(f"\nüìÑ –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: figure_analysis_report.json")


if __name__ == '__main__':
    main()