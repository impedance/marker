"""–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏, —á—Ç–æ –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–º–µ—é—Ç –µ–¥–∏–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ::sign-image."""

import re
from pathlib import Path
from typing import List, Tuple

import pytest


class TestImageFormatValidation:
    """–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –µ–¥–∏–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ —Å—Å—ã–ª–æ–∫ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."""

    def find_markdown_image_links(self, content: str) -> List[str]:
        """–ù–∞—Ö–æ–¥–∏—Ç –æ–±—ã—á–Ω—ã–µ markdown —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.
        
        –ò—â–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω: ![alt text](path.png)
        
        Args:
            content (str): –°–æ–¥–µ—Ä–∂–∏–º–æ–µ markdown —Ñ–∞–π–ª–∞.
            
        Returns:
            List[str]: –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö markdown —Å—Å—ã–ª–æ–∫.
        """
        pattern = r'!\[([^\]]*)\]\(([^)]*\.png)\)'
        matches = re.findall(pattern, content)
        return [f"![{alt}]({path})" for alt, path in matches]

    def find_sign_image_blocks(self, content: str) -> List[str]:
        """–ù–∞—Ö–æ–¥–∏—Ç –±–ª–æ–∫–∏ ::sign-image.
        
        Args:
            content (str): –°–æ–¥–µ—Ä–∂–∏–º–æ–µ markdown —Ñ–∞–π–ª–∞.
            
        Returns:
            List[str]: –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö src –ø—É—Ç–µ–π –∏–∑ sign-image –±–ª–æ–∫–æ–≤.
        """
        pattern = r'::sign-image\s*---\s*src:\s*([^\n]+)\s*sign:.*?---\s*::'
        matches = re.findall(pattern, content, re.DOTALL | re.MULTILINE)
        return [src.strip() for src in matches]

    def check_file_image_format(self, file_path: Path) -> Tuple[List[str], List[str]]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–æ–∫ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ.
        
        Args:
            file_path (Path): –ü—É—Ç—å –∫ markdown —Ñ–∞–π–ª—É.
            
        Returns:
            Tuple[List[str], List[str]]: (markdown_links, sign_image_links)
        """
        try:
            content = file_path.read_text(encoding='utf-8')
            markdown_links = self.find_markdown_image_links(content)
            sign_image_links = self.find_sign_image_blocks(content)
            return markdown_links, sign_image_links
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}")
            return [], []

    def test_all_image_links_are_sign_image_format(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç: –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ ::sign-image."""
        output_dir = Path("test-fixed-output")
        
        if not output_dir.exists():
            pytest.skip("–í—ã—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è 'output' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        # –ù–∞–π—Ç–∏ –≤—Å–µ .md —Ñ–∞–π–ª—ã
        md_files = list(output_dir.glob("**/*.md"))
        
        files_with_markdown_links = []
        total_markdown_links = 0
        total_sign_image_links = 0
        
        for md_file in md_files:
            markdown_links, sign_image_links = self.check_file_image_format(md_file)
            
            if markdown_links:
                files_with_markdown_links.append((md_file, markdown_links))
                total_markdown_links += len(markdown_links)
            
            total_sign_image_links += len(sign_image_links)
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print(f"\n=== –ê–ù–ê–õ–ò–ó –§–û–†–ú–ê–¢–û–í –°–°–´–õ–û–ö –ù–ê –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø ===")
        print(f"–í—Å–µ–≥–æ ::sign-image –±–ª–æ–∫–æ–≤: {total_sign_image_links}")
        print(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö markdown —Å—Å—ã–ª–æ–∫: {total_markdown_links}")
        
        if files_with_markdown_links:
            print(f"\n‚ùå –ù–ê–ô–î–ï–ù–´ –§–ê–ô–õ–´ –° –ù–ï–ü–†–ê–í–ò–õ–¨–ù–´–ú–ò –°–°–´–õ–ö–ê–ú–ò:")
            for file_path, links in files_with_markdown_links[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                relative_path = file_path.relative_to(output_dir)
                print(f"  üìÑ {relative_path}")
                for link in links[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Å—Å—ã–ª–∫–∏
                    print(f"    - {link}")
                if len(links) > 3:
                    print(f"    ... –∏ –µ—â–µ {len(links) - 3} —Å—Å—ã–ª–æ–∫")
            
            if len(files_with_markdown_links) > 5:
                print(f"  ... –∏ –µ—â–µ {len(files_with_markdown_links) - 5} —Ñ–∞–π–ª–æ–≤")
        else:
            print("‚úÖ –í–°–ï –°–°–´–õ–ö–ò –í –ü–†–ê–í–ò–õ–¨–ù–û–ú –§–û–†–ú–ê–¢–ï!")
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        assert total_markdown_links == 0, (
            f"–ù–∞–π–¥–µ–Ω–æ {total_markdown_links} —Å—Å—ã–ª–æ–∫ –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º markdown —Ñ–æ—Ä–º–∞—Ç–µ "
            f"–≤ {len(files_with_markdown_links)} —Ñ–∞–π–ª–∞—Ö. "
            f"–í—Å–µ —Å—Å—ã–ª–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ ::sign-image"
        )

    def test_sign_image_format_structure(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã ::sign-image –±–ª–æ–∫–æ–≤."""
        test_content = """
        –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –±–ª–æ–∫:
        ::sign-image
        ---
        src: /images/developer/user/picture_1.png
        sign: –†–∏—Å—É–Ω–æ–∫ 1 ‚Äì –û–ø–∏—Å–∞–Ω–∏–µ
        ---
        ::
        
        –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:
        ![Image image123](path/to/image.png)
        """
        
        markdown_links = self.find_markdown_image_links(test_content)
        sign_image_links = self.find_sign_image_blocks(test_content)
        
        assert len(markdown_links) == 1, f"–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–∞–π–¥–µ–Ω–∞ 1 markdown —Å—Å—ã–ª–∫–∞, –Ω–∞–π–¥–µ–Ω–æ: {len(markdown_links)}"
        assert len(sign_image_links) == 1, f"–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞–π–¥–µ–Ω 1 sign-image –±–ª–æ–∫, –Ω–∞–π–¥–µ–Ω–æ: {len(sign_image_links)}"
        assert sign_image_links[0] == "/images/developer/user/picture_1.png", f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å: {sign_image_links[0]}"

    def test_expected_sign_image_path_format(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –ø—É—Ç–µ–π –≤ sign-image –±–ª–æ–∫–∞—Ö."""
        output_dir = Path("output")
        
        if not output_dir.exists():
            pytest.skip("–í—ã—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è 'output' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –ø—É—Ç–µ–π
        md_files = list(output_dir.glob("**/*.md"))[:5]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 5 —Ñ–∞–π–ª–æ–≤
        
        correct_path_pattern = r'^/images/[a-zA-Z0-9_-]+/[a-zA-Z0-9_-]+/[a-zA-Z0-9_-]+/[a-zA-Z0-9_.-]+\.png$'
        
        for md_file in md_files:
            _, sign_image_links = self.check_file_image_format(md_file)
            
            for src_path in sign_image_links:
                # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ø—É—Ç—å –∫ PNG
                assert src_path.endswith('.png'), f"–ü—É—Ç—å –¥–æ–ª–∂–µ–Ω –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –Ω–∞ .png: {src_path}"
                
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ –ø—É—Ç–∏
                # –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                if src_path.startswith('/images/'):
                    # –ï—Å–ª–∏ –ø—É—Ç—å —É–∂–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                    assert re.match(correct_path_pattern, src_path), (
                        f"–ü—É—Ç—å –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É: {src_path}"
                    )